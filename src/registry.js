goog.provide('ZH.core.Registry');

goog.require('goog.dom');
goog.require('goog.array');
goog.require('goog.array.ArrayLike');
goog.require('goog.debug.Logger');
goog.require('goog.debug.TextFormatter');
goog.require('goog.structs.Map');

/**
 * Regist class type and opt_loadPath.
 *
 * @constructor
 */
ZH.core.Registry = function() {
    this.classTypeReferMap_ = new goog.structs.Map();
    this.instanceContainer_ = new goog.structs.Map();
};

ZH.core.Registry.instance_ = null;

ZH.core.Registry.getInstance = function() {
    if (!ZH.core.Registry.instance_) {
        ZH.core.Registry.instance_ = new ZH.core.Registry();
        ZH.core.Registry.instance_.init();
    }

    return ZH.core.Registry.instance_;
};

ZH.core.Registry.setNameMap = function(map) {
  var instance = new ZH.core.Registry();
  instance.init(map)
  ZH.core.Registry.instance_ = instance
};

/**
 * Init registry with a class name map.
 */
ZH.core.Registry.prototype.init = function(opt_classMap) {
  if (opt_classMap) {
    this.classNameMap_ = new goog.structs.Map(opt_classMap)
  }
};

ZH.core.Registry.prototype.classNameMap_ = null;

ZH.core.Registry.prototype.getConstructor = function(typeString){
    var class_ = this.classTypeReferMap_.get(typeString);
    if (!class_) {
        if (goog.DEBUG) {
            throw new Error('Undefined type: ' + typeString);
        }else{
            throw new Error('Undefined type: ' + typeString);
        }
    }
    return class_;
};

ZH.core.Registry.prototype.logger = goog.debug.Logger.getLogger('ZH.core.Registry');

//Here typeString could be a hash string generated by hand to hide details
//If so, need create a map for server side.
ZH.core.Registry.prototype.registType = function(typeString, classType) {
    typeString = this.shortName(typeString);
    // console.log('type string: ' + typeString + 'regist!!')
    this.classTypeReferMap_.set(typeString, classType);
};

ZH.core.Registry.prototype.registInstance = function(typeString, instanceId, instance){
    if(!(typeString && instanceId && instance)){
        throw new Error('Invalid instance or type to regist.')
    }
    
    typeString = this.shortName(typeString);
    
    var instanceCollection = this.instanceContainer_.get(typeString);
    if(!instanceCollection){
        instanceCollection = new goog.structs.Map();
        this.instanceContainer_.set(typeString, instanceCollection);
    }
    instanceCollection.set(instanceId, instance);
};

ZH.core.Registry.prototype.unRegistInstance = function(typeString, instanceId){
    if(!(typeString && instanceId)){
        return;
    }
    
    typeString = this.shortName(typeString);
    
    var instanceCollection = this.instanceContainer_.get(typeString);

    if(instanceCollection){
        instanceCollection.remove(instanceId);
    }
};

ZH.core.Registry.prototype.shortName = function(originName){
  if(this.classNameMap_) {
    var mapedName = this.classNameMap_.get(originName)
    if (mapedName) {
      return this.classNameMap_.get(originName)
    }
    
  }

  return originName
};

ZH.core.Registry.prototype.getInstanceById = function(typeString, instanceId){
    if(!(typeString && instanceId)) {
      //TODO: Create warning info message.
      return
    }
    
    //becase we store with short name.
    typeString = this.shortName(typeString);
    
    var m = this.instanceContainer_.get(typeString);
    
    if (m) {
        return m.get(instanceId);
    }
};

ZH.core.Registry.prototype.getInstanceByDomId = function(domId) {
    // var dom_ = goog.dom.getElement(instanceId);
    // if (!dom_) {
    //     return;
    // }
    if (!domId) {
      return
    }
    var a = domId.split('-')
    // ID: lc-[typeString]-[uniqueID]
    return this.getInstanceById(a[1], a[2]);
};







